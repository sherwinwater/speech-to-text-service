name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.10', cache: 'pip' }
      - run: sudo apt-get update && sudo apt-get install -y ffmpeg
      - run: python -m pip install --upgrade pip && pip install -e ".[dev]"
      - run: ruff check api/ tests/
        continue-on-error: true
      - run: mypy api/ --ignore-missing-imports
        continue-on-error: true
      - run: pytest -v --cov=api --cov-report=term-missing

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    steps:
      - uses: actions/checkout@v4

      - name: Decide target (dev/qa/prod)
        id: tgt
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "target=qa" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "target=dev" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "target=prod" >> $GITHUB_OUTPUT
          else
            echo "target=dev" >> $GITHUB_OUTPUT
          fi

      - name: Lowercase image name
        run: echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3
        with: { driver: docker-container }

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (${{ steps.tgt.outputs.target }})
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            APP_ENV=${{ steps.tgt.outputs.target }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ steps.tgt.outputs.target }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ steps.tgt.outputs.target }}-${{ github.sha }}
          cache-from: type=gha,scope=${{ steps.tgt.outputs.target }}
          cache-to: type=gha,mode=max,scope=${{ steps.tgt.outputs.target }}
