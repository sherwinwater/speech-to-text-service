name: Deploy

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: aws
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail

            # Resolve deploy path with safe fallback and ~ expansion
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
            DEPLOY_PATH="${DEPLOY_PATH:-$HOME/speech-to-text-service}"
            cd "$DEPLOY_PATH"

            # Determine the image tag to deploy:
            # - for workflow_run: use head_sha of the CI workflow that triggered this
            # - for manual dispatch: fall back to this workflow's commit sha
            IMAGE_TAG="${{ github.event.workflow_run.head_sha || github.sha }}"
            echo "[info] Deploying image tag: ${IMAGE_TAG}"

            # Optional: keep local checkout fresh if you also build on the server
            if [ -d .git ]; then
              git fetch origin main
              git reset --hard origin/main
            fi

            # Ensure .env contains IMAGE_TAG=<sha> (compose auto-loads .env)
            touch .env
            if grep -q '^IMAGE_TAG=' .env; then
              sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=${IMAGE_TAG}/" .env
            else
              echo "IMAGE_TAG=${IMAGE_TAG}" >> .env
            fi

            # Pull and restart using the prod profile; image is public, no login required
            if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
              sudo docker compose --profile prod pull
              sudo docker compose --profile prod up -d --remove-orphans
              sudo docker compose --profile prod ps
            else
              sudo docker-compose --profile prod pull
              sudo docker-compose --profile prod up -d --remove-orphans
              sudo docker-compose --profile prod ps
            fi

            sudo docker image prune -af
            echo "Deployment completed successfully!"
